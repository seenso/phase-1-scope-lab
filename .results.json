{
  "stats": {
    "suites": 6,
    "tests": 5,
    "passes": 2,
    "pending": 0,
    "failures": 3,
    "start": "2021-11-02T16:14:14.039Z",
    "end": "2021-11-02T16:14:14.509Z",
    "duration": 470
  },
  "tests": [
    {
      "title": "returns the customerName",
      "fullTitle": "Fix the Scope declare customerName to be bob in global scope returns the customerName",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "modifies the customerName variable",
      "fullTitle": "Fix the Scope upperCaseCustomerName() modifies the customerName variable",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "setBestCustomer",
      "fullTitle": "Fix the Scope setBestCustomer() setBestCustomer",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected 'not BOB' to equal 'not bob'",
        "showDiff": true,
        "actual": "not BOB",
        "expected": "not bob",
        "stack": "AssertionError: expected 'not BOB' to equal 'not bob'\n    at Context.<anonymous> (test/indexTest.js:23:38)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "overwrites the best customer",
      "fullTitle": "Fix the Scope overwriteBestCustomer() overwrites the best customer",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'not BOB' to equal 'maybe bob'",
        "showDiff": true,
        "actual": "not BOB",
        "expected": "maybe bob",
        "stack": "AssertionError: expected 'not BOB' to equal 'maybe bob'\n    at Context.<anonymous> (test/indexTest.js:31:38)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "unsuccessfully tries to reassign the least favorite customer",
      "fullTitle": "Fix the Scope changeLeastFavoriteCustomer() unsuccessfully tries to reassign the least favorite customer",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: changeLeastFavoriteCustomer is not defined\n    at Context.<anonymous> (test/indexTest.js:37:14)\n    at processImmediate (node:internal/timers:464:21)",
        "message": "changeLeastFavoriteCustomer is not defined"
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "setBestCustomer",
      "fullTitle": "Fix the Scope setBestCustomer() setBestCustomer",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "expected 'not BOB' to equal 'not bob'",
        "showDiff": true,
        "actual": "not BOB",
        "expected": "not bob",
        "stack": "AssertionError: expected 'not BOB' to equal 'not bob'\n    at Context.<anonymous> (test/indexTest.js:23:38)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "overwrites the best customer",
      "fullTitle": "Fix the Scope overwriteBestCustomer() overwrites the best customer",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "expected 'not BOB' to equal 'maybe bob'",
        "showDiff": true,
        "actual": "not BOB",
        "expected": "maybe bob",
        "stack": "AssertionError: expected 'not BOB' to equal 'maybe bob'\n    at Context.<anonymous> (test/indexTest.js:31:38)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "unsuccessfully tries to reassign the least favorite customer",
      "fullTitle": "Fix the Scope changeLeastFavoriteCustomer() unsuccessfully tries to reassign the least favorite customer",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: changeLeastFavoriteCustomer is not defined\n    at Context.<anonymous> (test/indexTest.js:37:14)\n    at processImmediate (node:internal/timers:464:21)",
        "message": "changeLeastFavoriteCustomer is not defined"
      }
    }
  ],
  "passes": [
    {
      "title": "returns the customerName",
      "fullTitle": "Fix the Scope declare customerName to be bob in global scope returns the customerName",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "modifies the customerName variable",
      "fullTitle": "Fix the Scope upperCaseCustomerName() modifies the customerName variable",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    }
  ]
}